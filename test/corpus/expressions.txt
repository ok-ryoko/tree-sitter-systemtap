========================================================================
Assignment expressions
========================================================================

function f() {
    p %= q
    p &= q
    p *= q
    p += q
    p -= q
    p .= q
    p /= q
    p <<= q
    p <<< q
    p = q
    p >>= q
    p ^= q
    p |= q
}

---

(program
  (function_definition
    name: (identifier)
    body: (statement_block
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (identifier))))))

========================================================================
Ternary expression
========================================================================

function f() {
    p ? q : r
    p ? q ? r : s : t
    p ? q : r ? s : t
}

---

(program
  (function_definition
    name: (identifier)
    body: (statement_block
      (expression_statement
        (ternary_expression
          condition: (identifier)
          consequence: (identifier)
          alternative: (identifier)))
      (expression_statement
        (ternary_expression
          condition: (identifier)
          consequence: (ternary_expression
            condition: (identifier)
            consequence: (identifier)
            alternative: (identifier))
          alternative: (identifier)))
      (expression_statement
        (ternary_expression
          condition: (identifier)
          consequence: (identifier)
          alternative: (ternary_expression
            condition: (identifier)
            consequence: (identifier)
            alternative: (identifier)))))))

========================================================================
Binary expressions
========================================================================

function f() {
    p != q
    p !~ q
    p % q
    p & q
    p && q
    p * q
    p + q
    p - q
    p . q
    p / q
    p < q
    p << q
    p <= q
    p == q
    p =~ q
    p > q
    p >= q
    p >> q
    p ^ q
    p | q
    p || q
}

---

(program
  (function_definition
    name: (identifier)
    body: (statement_block
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier)))
      (expression_statement
        (binary_expression
          left: (identifier)
          right: (identifier))))))

========================================================================
Unary expressions
========================================================================

function f() {
    p++; q--; ++r; --s; &t; !u; +v; -w; ~x
}

---

(program
  (function_definition
    name: (identifier)
    body: (statement_block
      (expression_statement
        (update_expression
          argument: (identifier)))
      (null_statement)
      (expression_statement
        (update_expression
          argument: (identifier)))
      (null_statement)
      (expression_statement
        (update_expression
          argument: (identifier)))
      (null_statement)
      (expression_statement
        (update_expression
          argument: (identifier)))
      (null_statement)
      (expression_statement
        (unary_expression
          argument: (identifier)))
      (null_statement)
      (expression_statement
        (unary_expression
          argument: (identifier)))
      (null_statement)
      (expression_statement
        (unary_expression
          argument: (identifier)))
      (null_statement)
      (expression_statement
        (unary_expression
          argument: (identifier)))
      (null_statement)
      (expression_statement
        (unary_expression
          argument: (identifier))))))

========================================================================
Autocast expressions
========================================================================

function f() {
    p[i];
    p->q; p->q->r;
    $p$; ($p)$;
    &p->q[i]; p[i]->q in a;
    @cast(t, "task_struct", "kernel")->comm[0]$$
}

---

(program
  (function_definition
    name: (identifier)
    body: (statement_block
      (expression_statement
        (subscript_expression
          argument: (identifier)
          index: (tuple_index
            (identifier))))
      (null_statement)
      (expression_statement
        (member_expression
          argument: (identifier)
          member: (identifier)))
      (null_statement)
      (expression_statement
        (member_expression
          argument: (identifier)
          member: (member_expression
            argument: (identifier)
            member: (identifier))))
      (null_statement)
      (expression_statement
        (identifier))
      (null_statement)
      (expression_statement
        (context_variable_expansion
          argument: (grouping_expression
            (identifier))))
      (null_statement)
      (expression_statement
        (unary_expression
          argument: (subscript_expression
            argument: (member_expression
              argument: (identifier)
              member: (identifier))
            index: (tuple_index
              (identifier)))))
      (null_statement)
      (expression_statement
        (array_in_expression
          left: (member_expression
            argument: (subscript_expression
              argument: (identifier)
              index: (tuple_index
                (identifier)))
            member: (identifier))
          right: (identifier)))
      (null_statement)
      (expression_statement
        (context_variable_expansion
          argument: (subscript_expression
            argument: (member_expression
              argument: (preprocessor_macro_expansion
                argument: (identifier)
                argument: (literal
                  (string))
                argument: (literal
                  (string)))
              member: (identifier))
            index: (tuple_index
              (literal
                (number)))))))))
