========================================================================
If statement with else clause (nested)
========================================================================

function f() {
    if (p) {} else if (q) ; else {}
}

---

(program
  (function_definition
    name: (identifier)
    body: (statement_block
      (if_statement
        condition: (identifier)
        consequence: (statement_block)
        alternative: (if_statement
          condition: (identifier)
          consequence: (null_statement)
          alternative: (statement_block))))))

========================================================================
While loop with break statement
========================================================================

function f() {
    while (p) break
}

---

(program
  (function_definition
    name: (identifier)
    body: (statement_block
      (while_statement
        condition: (identifier)
        body: (break_statement)))))

========================================================================
For loops with continue and null statements
========================================================================

function f() {
    for (;;) ;
    for (i = 0;;) {}
    for (; i < 1024;) continue
    for (;; i++) ;
    for (i = 0; i < 1024;) {}
    for (; i < 1024; i++) continue
    for (i = 0;; i++) ;
    for (i = 0; i < 1024; i++) {}
}

---

(program
  (function_definition
    name: (identifier)
    body: (statement_block
      (for_statement
        body: (null_statement))
      (for_statement
        initialization: (expression_statement
          (assignment_expression
            left: (identifier)
            right: (literal
              (number))))
        body: (statement_block))
      (for_statement
        condition: (expression_statement
          (binary_expression
            left: (identifier)
            right: (literal
              (number))))
        body: (continue_statement))
      (for_statement
        iteration: (expression_statement
          (update_expression
            argument: (identifier)))
        body: (null_statement))
      (for_statement
        initialization: (expression_statement
          (assignment_expression
            left: (identifier)
            right: (literal
              (number))))
        condition: (expression_statement
          (binary_expression
            left: (identifier)
            right: (literal
              (number))))
        body: (statement_block))
      (for_statement
        condition: (expression_statement
          (binary_expression
            left: (identifier)
            right: (literal
              (number))))
        iteration: (expression_statement
          (update_expression
            argument: (identifier)))
        body: (continue_statement))
      (for_statement
        initialization: (expression_statement
          (assignment_expression
            left: (identifier)
            right: (literal
              (number))))
        iteration: (expression_statement
          (update_expression
            argument: (identifier)))
        body: (null_statement))
      (for_statement
        initialization: (expression_statement
          (assignment_expression
            left: (identifier)
            right: (literal
              (number))))
        condition: (expression_statement
          (binary_expression
            left: (identifier)
            right: (literal
              (number))))
        iteration: (expression_statement
          (update_expression
            argument: (identifier)))
        body: (statement_block)))))

========================================================================
Foreach loops with continue, delete and null statements
========================================================================

probe end {
    foreach (v+ in a) continue
    foreach (v in a+ limit 10) ;

    foreach (v- = k in a) {}
    foreach (v = k in a@sum- limit 1000) continue
    foreach (v = t in a[tid(), *]) ;

    foreach ([p+, q] in a) ;
    foreach ([p, q+] in a limit 1) {}
    foreach ([t, q] in a[tid(), *]@avg+) delete a[t, q]

    foreach (v- = [p, q] in a) continue
    foreach (v = [p-, q] in a) {}
    foreach (v = [p, q-] in a) ;
    foreach (v = [t, q] in a[tid(), *]@count- limit $1) ;
}

---

(program
  (probe_point_definition
    probe_point: (probe_point
      component: (probe_point_component))
    body: (statement_block
      (foreach_statement
        declarator: (foreach_declarator
          key: (identifier)
          sort_direction: (sort_direction))
        array: (foreach_array
          array: (identifier))
        body: (continue_statement))
      (foreach_statement
        declarator: (foreach_declarator
          key: (identifier))
        array: (foreach_array
          array: (identifier)
          sort_direction: (sort_direction))
        limit: (literal
          (number))
        body: (null_statement))
      (foreach_statement
        declarator: (foreach_declarator
          value: (identifier)
          sort_direction: (sort_direction)
          key: (identifier))
        array: (foreach_array
          array: (identifier))
        body: (statement_block))
      (foreach_statement
        declarator: (foreach_declarator
          value: (identifier)
          key: (identifier))
        array: (foreach_array
          array: (identifier)
          aggregation_operator: (aggregation_operator)
          sort_direction: (sort_direction))
        limit: (literal
          (number))
        body: (continue_statement))
      (foreach_statement
        declarator: (foreach_declarator
          value: (identifier)
          key: (identifier))
        array: (foreach_array
          array: (identifier)
          index: (tuple_index
            (call_expression
              function: (identifier))))
        body: (null_statement))
      (foreach_statement
        declarator: (foreach_declarator
          key: (tuple_capture
            (identifier)
            (sort_direction)
            (identifier)))
        array: (foreach_array
          array: (identifier))
        body: (null_statement))
      (foreach_statement
        declarator: (foreach_declarator
          key: (tuple_capture
            (identifier)
            (identifier)
            (sort_direction)))
        array: (foreach_array
          array: (identifier))
        limit: (literal
          (number))
        body: (statement_block))
      (foreach_statement
        declarator: (foreach_declarator
          key: (tuple_capture
            (identifier)
            (identifier)))
        array: (foreach_array
          array: (identifier)
          index: (tuple_index
            (call_expression
              function: (identifier)))
          aggregation_operator: (aggregation_operator)
          sort_direction: (sort_direction))
        body: (delete_statement
          (subscript_expression
            argument: (identifier)
            index: (tuple_index
              (identifier)
              (identifier)))))
      (foreach_statement
        declarator: (foreach_declarator
          value: (identifier)
          sort_direction: (sort_direction)
          key: (tuple_capture
            (identifier)
            (identifier)))
        array: (foreach_array
          array: (identifier))
        body: (continue_statement))
      (foreach_statement
        declarator: (foreach_declarator
          value: (identifier)
          key: (tuple_capture
            (identifier)
            (sort_direction)
            (identifier)))
        array: (foreach_array
          array: (identifier))
        body: (statement_block))
      (foreach_statement
        declarator: (foreach_declarator
          value: (identifier)
          key: (tuple_capture
            (identifier)
            (identifier)
            (sort_direction)))
        array: (foreach_array
          array: (identifier))
        body: (null_statement))
      (foreach_statement
        declarator: (foreach_declarator
          value: (identifier)
          key: (tuple_capture
            (identifier)
            (identifier)))
        array: (foreach_array
          array: (identifier)
          index: (tuple_index
            (call_expression
              function: (identifier)))
          aggregation_operator: (aggregation_operator)
          sort_direction: (sort_direction))
        limit: (literal
          (script_argument_number))
        body: (null_statement)))))

========================================================================
Try statement with catch clause
========================================================================

probe p {
    try {} catch (x) {}
}

---

(program
  (probe_point_definition
    probe_point: (probe_point
      component: (probe_point_component))
    body: (statement_block
      (try_statement
        body: (statement_block)
        handler: (catch_clause
          parameter: (identifier)
          body: (statement_block))))))
